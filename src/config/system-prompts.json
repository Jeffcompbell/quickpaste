{
  "requirement": [
    {
      "id": "req-001",
      "title": "需求分析模板",
      "content": "作为产品经理，请帮我分析以下需求：\n1. 业务背景与目标\n2. 用户痛点分析\n3. 功能需求列表\n4. 非功能性需求\n5. 优先级排序\n6. 验收标准\n请基于以上框架，详细分析我即将提供的需求。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-002",
      "title": "iOS记账应用",
      "content": "你是一个经验丰富的 iOS 工程师,我们目前新建了一个 iOS app 项目,叫 SmartSpend,你现在正在这个项目的根目录,请帮助我完成这个 app 的开发。\n\n## App功能说明\n1、快速记账：用户可通过点击界面底部的\"+\"按钮快速添加收支记录,支持手动输入和语音输入；\n2、智能分类：系统自动识别用户输入的消费内容,智能归类到对应支出类别（如餐饮、交通、购物等）；\n3、数据分析：对用户的收支情况���析,生成月度报告,并提供个性化的理财建议和预算提醒。\n\n## App界面说明\n1、首页：展示本月收支概况、预算使用进度,以及最近的交易记录；\n2、统计：通过图表展示收支分析,包括分类占比、月度趋势、支出热点等；\n3、我的：个人设置、预算管理、导出记录、账本切换等功能。\n\n## 相关信息\n1、语音识别API：[语音转文字API地址]\n2、智能分类算法：[机器学习API地址]\n3、数据分析引擎：[数据分析API地址]\n\n现在请作为产品经理,先写一个 readme 文档并保存在根目录,阐述你对我的需求的理解,以及实现方式,下一步计划等,然后开始编程,设计这三个界面和功能。如果你理解了,请先完成 readme 文档。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-003",
      "title": "iOS笔记应用",
      "content": "你是一个经验丰富的 iOS 工程师,我们目前新建了一个 iOS app 项目,叫 MindNote,你现在正在这个项目的根目录,请帮助我完成这个 app 的开发。\n\n## App功能说明\n1、多媒体笔记：支持文字、图片、语音、手写等多种形式的笔记输入；\n2、智能整理：使用AI自动为笔记添加标签、摘要、建知识关联；\n3、协同编辑：支持多人实时协作编辑、评论和分���笔记。\n\n## App界面说明\n1、首页：展示最近笔记、重要笔记、待办事项,支持快速创建新笔记；\n2、笔记本：按照文件夹、标签等多维度组织和展示所有笔记；\n3、发现：展示AI推荐的相关笔记、热门分享内容。\n\n## 相关信息\n1、文字识别API：[OCR API地址]\n2、AI摘要生成：[自然语言处理API地址]\n3、实时协作引擎：[WebSocket服务地址]\n\n现在请作为产品经理,先写一个 readme 文档并保存在根目录,阐述你对我的需求的理解,以及实现方式,下一步计划等,然后开始编程,设计这三个界面和功能。如果你理解了,请先完成 readme 文档。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-004",
      "title": "iOS Todo待办应用",
      "content": "你是一个经验丰富的 iOS 工程师,我们目前新建了一个 iOS app 项目,叫 TaskFlow,你现在正在这个项目的根目录,请帮助我完成这个 app 的开发。\n\n## App功能说明\n1、智能任务创建：支持自然语言输入,AI自动解析截止日期、优先级等息\n2、任务管理：支持任务分类、设置提醒、添加子任务、标记完成状态；\n3、进度追踪：自动计算任务完成情况,生成效率报告,提供改进建议。\n\n## App界面说明\n1、今日：展示今天需要完成的任务,支持快速添加、编辑和完成；\n2、计划：按项目、时间线展示所有任务,支持拖拽排序和批量操作；\n3、统计：展示任务完成率、效率分析、时间投入等数据。\n\n## 相关信息\n1、自然语言处理API：[NLP API地址]\n2、日历同步服务：[Calendar API地址]\n3、数据分析服务：[Analytics API地址]\n\n现在请作为产品经理,先写一个 readme 文档并保存在根目录,阐述你对我的需求的理解,以及实现方式,下一步计划等,然后开始编程,设计这三个界面和功能。如果你理解了,请先完成 readme 文档。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-005",
      "title": "NextJS Web导航工具",
      "content": "你是一个经验丰富的 Next.js 全栈工程师,我们目前要开发一个现代化的导航网站项目。请助完成这个网站的开��。\n\n## 功能需求\n1、网站导航：\n   - 支持分类展示不同类型的网站链接\n   - 每个网站展示图标、标题、描述\n   - 支持搜索和筛选功能\n   \n2、用户系统：\n   - 支持用户注册/登录\n   - 允许用户收藏喜欢的网站\n   - 支持用提交新的网站收录申请\n\n3、管理功能：\n   - 管理员后台管理系统\n   - 网站审核和分类管理\n   - 数据统计和分析\n\n## 页面说明\n1、首页：展示热门网站、最新收录、分类导航等\n2、分类页：展示特定分类下的所有网站\n3、搜索页：支持多维度搜索和筛选\n4、用户中心：展示个人收藏、提交记录等\n5、管理后台：网站管理、用户管理、数据统计等\n\n## 技术要求\n1. 核心框架:\n   - Next.js 14 (App Router)\n   - React 18\n   - TypeScript\n   \n2. UI组件:\n   - Tailwind CSS\n   - shadcn/ui\n   - React Icons\n   \n3. 数据管理:\n   - Prisma\n   - MongoDB Atlas\n   \n4. 认证服务:\n   - NextAuth.js\n   \n5. 部署平台:\n   - Vercel\n\n现在请作为技术架构师：\n1. 请详细设计项目的目录结构\n2. 规划主要组件的划分\n3. 设计数据库模型\n4. 设计 API 接口路由\n5. 制定开发计划和时间节点\n\n如果你理解了,请先完成技术方案设计文档。后��可以开始逐步实现这个导航网站。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-006",
      "title": "微信小程序计算器",
      "content": "你是一个经验丰富的微信小程序工程师，我们目前要开发一个计算器小程序，叫 MiniCalc，你现在正在这个项目的根目录，请帮助我完成这个小程序的开发。\n\n## 功能说明\n1、基础计算：\n   - 支持加减乘除等基础运算\n   - 支持百分比、正负号转换\n   - 支持清除、回退操作\n\n2、高级功能：\n   - 支持科学计算（三角函数、指数、对数等）\n   - 支持单位换算（长度、面积、体积等）\n   - 历史记录保存与查看\n\n## 界面说明\n1、主界面：\n   - 上方显示计算结果\n   - 中间显示计算过程\n   - 下方是计算键盘\n\n2、功能切换：\n   - 支持左右滑动切换基础/科学计算\n   - 底部标签切换不同单位换算\n\n3、历史记录：\n   - 上滑查看历史记录\n   - 点击记录可重新计算\n\n## 技术要求\n1. 框架与工具：\n   - 原生微信小程序\n   - WXML & WXSS\n   - JavaScript\n\n2. 数据管理：\n   - 本地存储 Storage\n   - 全局状态管理\n\n3. 组件化：\n   - 自定义组件\n   - behaviors 复用\n\n4. 性能优化：\n   - 高精度计算优化\n   - 动态性能优化\n\n现在请作为产品经理，先写一个 README.md 文档并保存在根目录，阐述你对我的需求的理解，以及实现方式，下一步计划等，然后开始编程，设计这些界面和功能。如果你理解了，请先完成 README.md 文档。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "req-007",
      "title": "Electron 纪念日应用",
      "content": "你是一个经验丰富的 Electron 开发工程师，我们目前要开发一个纪念日应用，叫 MemoryDays，你现在正在这个项目的根目录，请帮助我完成这个应用的开发。\n\n## 功能说明\n1、纪念日管理：\n   - 支持添加、编辑、删除纪念日\n   - 自定义纪念日类型（生日、节日、纪念等）\n   - 支持农历和阳历日期切换\n\n2、提醒功能：\n   - 系统托盘常驻显示最近纪念日\n   - 自定义提醒时间和方式\n   - 支持桌面通知推送\n\n3、数据同步：\n   - 本地数据持久化存储\n   - 支持数据导入导出\n   - 支持日历软件同步\n\n## 界面说明\n1、主界面：\n   - 时间轴展示所有纪念日\n   - 倒计时显示最近纪念日\n   - 快速添加入口\n\n2、设置界面：\n   - 常规设置（主题、语言等）\n   - 提醒设置（时间、方式）\n   - 数据管理（备份、恢复）\n\n3、系统集成：\n   - 系统托盘图标\n   - 快捷键支持\n   - 开机自启动\n\n## 技术要求\n1. 框架与工具：\n   - Electron\n   - React + TypeScript\n   - TailwindCSS\n\n2. 数据管理：\n   - SQLite 本地数据库\n   - 状态管理 (Zustand)\n\n3. 系统集成：\n   - 系统通知 API\n   - 自动更新\n   - 系统托盘\n\n4. 性能优化：\n   - 启动速度优化\n   - 内存占用控制\n   - 后台进程管理\n\n现在请作为产品经理，先写一个 README.md 文档并保存在根目录，阐述你对我的需求的理解，以及实现方式，下一步计划等，然后开始编程，设计这些界面和功能。如果你理解了，请先完成 README.md 文档。",
      "directory": "requirement",
      "category": "requirement",
      "author": "System",
      "isSystem": true,
      "type": "product"
    }
  ],
  "debug": [
    {
      "id": "imp-001",
      "title": "代码优化助手",
      "content": "作为高级开发工��师，请帮我优化以下代码，重点关注：\n1. 代码可读性\n2. 性能优化\n3. 最佳实践\n4. 设计模式应用\n5. 潜在问题\n请提供优化建议和具体的代码实现。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-002",
      "title": "依赖文件检查",
      "content": "请认真阅读与分析相关代码/相关文件后，再进行解决问题。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-003",
      "title": "控制文件改动",
      "content": "请认真阅读当前相关文件目录，在现有代码基础上修复问题，不需要新增文件来实现。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-004",
      "title": "问题一直无法解决",
      "content": "请站架构师角度，仔细审查当前代码和实现方式，给出具体的3个解决方案和实现步骤，前先不写代码",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-005",
      "title": "防止问题复现",
      "content": "请生成此次问题修复的技术文档为md格式，包含问题描述、实现方案和注意事项。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-006",
      "title": "新模块与上一模块样式交互不统一",
      "content": "请先阅读[上个模块]的代码并形成设计规范文档，文档包含布局样式、交互逻辑和实现步骤等内容；后面按照规范文档来优化下[当前模块]",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-007",
      "title": "回滚上个可用版本",
      "content": "请提供回滚到[版本号]的具体操作步骤和影响范围。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-008",
      "title": "配置环境冲突",
      "content": "请仔细阅读package.json文件，根据当前的报错，给出具体解决方案，要求包含可行的操作步骤",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-009",
      "title": "增加报错日志打印",
      "content": "请增加当前模块的报错日志打印，方便我在控制台调试和复制问题给你",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-010",
      "title": "移动端兼容性处理",
      "content": "当前页面需要支持PC端和移动端布局，请",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "imp-011",
      "title": "测试用例补充",
      "content": "请为[功能/修改]设计必要的测试用例，包括正常流程和异常场景的覆盖。",
      "directory": "debug",
      "category": "debug",
      "author": "System",
      "isSystem": true,
      "type": "product"
    }
  ],
  "deployment": [
    {
      "id": "dep-001",
      "title": "Git SSH Key 快速配置指南",
      "content": "1. 检查现有 SSH 密钥\nls -al ~/.ssh\n如果目录下已有 id_rsa 或 id_ed25519 文件，可直接跳到第 3 步。\n\n2. 生成 SSH 密钥\nssh-keygen -t ed25519 -C \"你的邮箱地址\"\n按三次回车使用默认配置\n\n3. 复制 SSH 公钥\nWindows: clip < ~/.ssh/id_ed25519.pub\nmacOS: pbcopy < ~/.ssh/id_ed25519.pub\nLinux: cat ~/.ssh/id_ed25519.pub\n\n4. 添加到 GitHub\n打开 GitHub SSH 设置 (https://github.com/settings/keys)\n点击 \"New SSH key\"\n粘贴公钥内容并保存\n\n5. 测试连接\nssh -T git@github.com\n首次连接会提示验证，输入 yes 即可\n\n6. 配置 Git 用户信息\ngit config --global user.name \"你的姓名\"\ngit config --global user.email \"你的邮箱地址\"\n\n完成！现在可以通过 SSH 进行 Git 操作了。",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "dep-002",
      "title": "Git 初始化与推送教程",
      "content": "1. 创建远程仓库\n在 GitHub创建一个新的仓库。\n点击new按钮来Create a new repository\n\n2. 创建本地 Git 仓库\n进入你的项目文件夹，初始化 Git 仓库：\ngit init\n\n3. 提交更改\n提交所有更改：\ngit commit -m \"first version\"\n\n4. 连接远程仓库\n将本地仓库与远程仓库关联（创建repo会显示）：\ngit remote add origin git@github.com:username/repository.git\n\n5. 推送本地仓库到远程仓库\n推送更改到远程仓库：\ngit push -u origin master\n\n6. 完成\n推送完成后，本地仓库的内容已成功上传到远程仓库。查看相应Repo刷新页面即可查看。",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "dep-003",
      "title": "后续 Git 推送教程",
      "content": "1. 进入本地仓库\n进入你的项目文件夹。打开终端命令行。\n\n2. 查看状态\n查看当前的状态和分支：\ngit status\n\n3. 添加更改到暂存区\n将更改添加到暂存区：\ngit add .\n\n4. 提交更改\n提交所有更改：\ngit commit -m \"提交信息\"\n\n5. 推送到远程仓库\n如果 `git status` 显示你当前分支是默认分支（如 `master` 或 `main`），可以直接使用：\ngit push\n\n6. 完成\n推送完成后，本地仓库的更改已成功上传到远程仓库。",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "dep-004",
      "title": "Git 版本回滚指南",
      "content": "1. 查看提交历史\n查看提交记录和对应的 commit ID：\ngit log --oneline\n\n2. 选择回滚方式\n\n方式一：回滚到指定版本，保留变更为未提交状态：\ngit reset --soft <commit_id>\n\n方式二：回滚到指定版本，丢弃所有变更：\ngit reset --hard <commit_id>\n\n方式三：创建新提交来撤销某个提交的修改：\ngit revert <commit_id>\n\n3. 程仓库处理\n如果已推送到远程，需要强制推送：\ngit push -f origin <branch_name>\n\n注意事项：\n- 使用 --hard 参数会丢失所有未提交的修改\n- 强制推送可能影响他人代码，需要团队沟通\n- 建议在操作前先创建备份分支",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "dep-005",
      "title": "Git 冲突解决教程",
      "content": "1. 更新本地代码\n在开始解决冲突前，先更新本地代码：\ngit pull origin <branch_name>\n\n2. 查看冲突文件\n使用以下命令查看冲突文件：\ngit status\n\n3. 解决冲突\n打开冲突文件，会看到类似标记：\n<<<<<<< HEAD\n你的代码\n=======\n他人的代码\n>>>>>>> branch-name\n\n4. 选择保留代码\n- 保留你的更改：删除 ======= 及以下内容\n- 保留他人更改：删除 <<<<<<< HEAD 至 ======= 的内容\n- 合并更改：手动编辑保留需要的部分\n\n5. 标记为已解决\n解决后标记文件：\ngit add <file_name>\n\n6. 完成合并\n提交解决结果：\ngit commit -m \"解决合并冲突\"\n\n7. 推送更改\n推送到远程仓库：\ngit push\n\n注意事项：\n- 建议在解决冲突前先与团队沟通\n- 复杂冲突可使用图形化工具（如 VS Code）\n- 确保理解双方代码的功能再解决冲突",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "dep-006",
      "title": "Vercel 部署检查",
      "content": "请检查以下部署相关的配置：\n1. package.json 中的构建命令和依赖\n2. next.config.js 的环境变量和路由配置\n3. vercel.json 的自定义设置\n4. API 路由和数据库连接\n5. 静态资源和图片优化\n\n如有报错，请提供构建日志以便分析。",
      "directory": "deployment",
      "category": "deployment",
      "author": "System",
      "isSystem": true,
      "type": "product"
    }
  ],
  "summary": [
    {
      "id": "sum-001",
      "title": "技术栈规范文档",
      "content": "请帮我梳理项目的技术栈规范，包含以下方面：\n\n1. 前端框架规范\n   - 框架版本与配置\n   - 目录结构规范\n   - 组件设计规范\n   - 状态管理方案\n\n2. 代码规范\n   - 命名规范\n   - 注释规范\n   - TypeScript 使用规范\n   - ESLint 配置说明\n\n3. 样式规范\n   - TailwindCSS 使用规范\n   - 主题设计规范\n   - 响应式设计规范\n   - 组件样式规范\n\n4. 工程化规范\n   - Git 工作流程\n   - CI/CD 流程\n   - 测试规范\n   - 发布流程\n\n请基于现有代码，生成一份完整的技术规范文档。",
      "directory": "summary",
      "category": "summary",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "sum-002",
      "title": "设计语言总结",
      "content": "请帮我总结项目的设计语言规范，包含以下方面：\n\n1. 视觉设计\n   - 色彩系统\n   - 字体规范\n   - 间距规范\n   - 阴影使用\n\n2. 组件设计\n   - 基础组件规范\n   - 布局组件规范\n   - 表单组件规范\n   - 反馈组件规范\n\n3. 交互设计\n   - 交互动效\n   - 状态反馈\n   - 手势操作\n   - 无障碍设计\n\n4. 响应式设计\n   - 断点设计\n   - 布局适配\n   - 内容响应\n   - 性能优化\n\n请基于现有界面，提炼出一份完整的设计语言文档。",
      "directory": "summary",
      "category": "summary",
      "author": "System",
      "isSystem": true,
      "type": "product"
    },
    {
      "id": "sum-003",
      "title": "项目经验总结",
      "content": "请帮我总结项开发经验，包含以下方面：\n\n1. 技术选型\n   - 框架选择理由\n   - 遇到的问题\n   - 解决方案\n   - 最佳实践\n\n2. 架构设计\n   - 整体架构\n   - 数据流设计\n   - 性能优化\n   - 扩展性考虑\n\n3. 工程化实践\n   - 开发流程\n   - 协作方式\n   - 质量保证\n   - 部署策略\n\n4. 团队管理\n   - 任务分配\n   - 代码审查\n   - 知识沉淀\n   - 团队协作\n\n请基于项目经验，总结出一份完整的经验文档。",
      "directory": "summary",
      "category": "summary",
      "author": "System",
      "isSystem": true,
      "type": "product"
    }
  ]
}
